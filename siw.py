# -*- coding: utf-8 -*-
"""SIW

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12J6gig8719Sg3bBpkY9qbipTFtWZsdrx
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import seaborn as sns

import sklearn  #powerful Python library for machine learning, providing tools for data preprocessing, model building, and evaluation.
import numpy as np #is a fundamental package for scientific computing in Python, providing support for large multi-dimensional arrays and matrices, along with a collection of mathematical functions.
import os #is a standard library in Python that provides functions to interact with the operating system, such as handling files and directories, executing commands, and fetching environment variables.
import matplotlib as mpl # A comprehensive library for creating static, animated, and interactive visualizations in Python.
import matplotlib.pyplot as plt #A module within matplotlib that provides a MATLAB-like interface for creating figures and plots.
from sklearn.model_selection import train_test_split #This function from sklearn splits the dataset into training and testing sets.
from sklearn.linear_model import LinearRegression #LinearRegression is a class that implements the linear regression algorithm in sklearn.
from sklearn.metrics import mean_squared_error, r2_score #A metric used to evaluate the accuracy of a regression model by calculating the average squared difference between the predicted values and the actual values. Lower values indicate better accuracy

df=pd.read_csv('/content/Used Car Dataset.csv')# تحميل البيانات
df

df.head()

df

df.sample()# عرض عينه

df.info()# نبذه عن بياناتك

df.describe()# توفر لك معلومات إحصائيه لمجموعه بياناتك

df.isnull().sum()# لتحقق من وجود قيم مفقوده

df.isnull().sum().sum()

df.duplicated().sum()

df = df.dropna()

df.isnull().sum().sum()

import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
plt.scatter(df['mileage(kmpl)'], df['price(in lakhs)'], color='blue', alpha=0.5)
plt.title('Scatter Plot: Mileage vs Price')
plt.xlabel('mileage(kmpl)')
plt.ylabel('price(in lakhs)')
plt.grid(True)
plt.show()


plt.figure(figsize=(8, 6))
plt.hist(df['mileage(kmpl)'], bins=30, color='green', alpha=0.7, edgecolor='black')
plt.title('Histogram: Price Distribution')
plt.xlabel('price(in lakhs)')
plt.ylabel('engine(cc)	')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

numerical_features = df.select_dtypes(include=['float64', 'int64'])

plt.figure(figsize=(8, 5))
sns.heatmap(numerical_features.corr(),annot=True ,cmap="coolwarm")
plt.title("correlatSZion map")
plt.show()

features = ['mileage(kmpl)']
X = df[features]
y = df['price(in lakhs)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)

y_pred = lin_reg.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Root Mean Squared Error: {rmse}")
print(f"R-squared: {r2}")

input_KL = [[20]]

predicted_price = lin_reg.predict(input_KL)

print(f"Predicted Price for a used car with mileage(kmpl) of {input_KL[0][0]}: {predicted_price[0]}")

input_KL = [[7]]

predicted_price = lin_reg.predict(input_KL)

print(f"Predicted Price for a used car with mileage(kmpl) of {input_KL[0][0]}: {predicted_price[0]}")

input_KL = [[ST=C,PH=45]]

predicted_price = lin_reg.predict(input_KL)

print(f"Predicted Price for a used car with mileage(kmpl) of {input_KL[0][0]}: {predicted_price[0]}")

